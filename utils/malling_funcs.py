import asyncio
import logging

from pyrogram import Client
from pyrogram.errors import (
    PeerFlood,
    UserIsBlocked,
    FloodWait,
    UsernameInvalid,
    UsernameNotOccupied,
    ChatWriteForbidden,
    RPCError
)
from typing import List
from aiogram import Bot
from pyrogram.enums.parse_mode import ParseMode

from config_data.config import load_config, Config


config: Config = load_config()

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


async def process_malling(account: str, base: list[str], user_id: int, text: str, bot: Bot):
    client = Client(f'accounts/{user_id}_{account.replace(" ", "_")}', api_id=config.user_bot.api_id, api_hash=config.user_bot.api_hash)
    try:
        await client.start()
    except Exception as err:
        print(err)
        await bot.send_message(
            chat_id=user_id,
            text='‚ùóÔ∏è–°–µ—Å—Å–∏—è –≤–∞—à–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ —Å–ª–µ—Ç–µ–ª–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ —É–¥–∞–ª–∏—Ç–µ –∏ –¥–æ–±–∞–≤—å—Ç–µ –≤ –±–æ—Ç–∞ –¥–∞–Ω–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç –ø–æ–≤—Ç–æ—Ä–Ω–æ'
        )
        return
    delay = 15
    results = {
        "sent": [],
        "failed": [],
        "blocked": [],
        "not_found": [],
        "flood_wait": [],
        "invalid": [],
        "write_forbidden": []
    }
    print(base)
    print('base: ', len(base))
    for username in base:
        # –û—á–∏—â–∞–µ–º —é–∑–µ—Ä–Ω–µ–π–º
        clean_username = username.strip().lstrip('@')
        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            await client.send_message(clean_username, text)
            results["sent"].append(clean_username)
            logger.info(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: @{clean_username}")

        except PeerFlood:
            results["not_found"].append(clean_username)
            logger.warning(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω: @{clean_username}")

        except UserIsBlocked:
            results["blocked"].append(clean_username)
            logger.warning(f"üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞: @{clean_username}")

        except UsernameInvalid:
            results["invalid"].append(username)
            logger.warning(f"‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —é–∑–µ—Ä–Ω–µ–π–º–∞: {username}")

        except UsernameNotOccupied:
            results["not_found"].append(clean_username)
            logger.warning(f"‚ùå –Æ–∑–µ—Ä–Ω–µ–π–º –Ω–µ –∑–∞–Ω—è—Ç: @{clean_username}")

        except ChatWriteForbidden:
            results["write_forbidden"].append(clean_username)
            logger.warning(f"‚õî –ù–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É: @{clean_username}")

        except FloodWait as e:
            # –í–∞–∂–Ω–æ: –Ω—É–∂–Ω–æ –ø–æ–¥–æ–∂–¥–∞—Ç—å —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è
            wait_seconds = e.value
            logger.error(f"‚è±Ô∏è FloodWait: –∂–¥—ë–º {wait_seconds} —Å–µ–∫—É–Ω–¥...")
            await asyncio.sleep(wait_seconds)
            # –ú–æ–∂–Ω–æ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–ø—ã—Ç–∫—É, –Ω–æ –ª—É—á—à–µ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è
            results["flood_wait"].append({"username": clean_username, "wait": wait_seconds})
            break  # –ü—Ä–µ—Ä—ã–≤–∞–µ–º, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å –ø–æ—Å–ª–µ –±–æ–ª—å—à–æ–≥–æ wait

        except RPCError as e:
            results["failed"].append({"username": clean_username, "error": str(e)})
            logger.error(f"‚ùå RPC –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ @{clean_username}: {e}")

        except Exception as e:
            results["failed"].append({"username": clean_username, "error": str(e)})
            logger.error(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ —Å @{clean_username}: {e}")

        # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
        await asyncio.sleep(delay)
    await client.stop()
    print("üì¨ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
    print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ: {len(results['sent'])}")
    print(f"üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª–∏: {len(results['blocked'])}")
    print(f"‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã: {len(results['not_found'])}")
    print(f"‚è∏Ô∏è FloodWait: {len(results['flood_wait'])}")
    await bot.send_message(
        chat_id=user_id,
        text=f'–†–∞—Å—Å—ã–ª–∫–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!\n\n–°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—É—á–∏–ª–æ <em>{len(results["sent"])}</em> –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π'
    )
    return results
